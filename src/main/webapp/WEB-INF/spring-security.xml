<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
    xmlns:security="http://www.springframework.org/schema/security"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
	   		http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
			http://www.springframework.org/schema/security 
			http://www.springframework.org/schema/security/spring-security-3.2.xsd">
	
	<!-- This is where we configure Spring-Security  -->
	<security:http auto-config="true" use-expressions="true" access-denied-page="/denied" >
		
		<security:intercept-url pattern="/login" access="permitAll"/>
		<!--<security:intercept-url pattern="/" access="permitAll"/>--> 
		<security:intercept-url pattern="/" access="hasRole('ROLE_USER')"/>
		<security:intercept-url pattern="/common" access="hasRole('ROLE_USER')"/>
		
		<security:form-login
				login-page="/login" 
				authentication-failure-url="/login?error=true" 
				default-target-url="/"/>
			
		<security:logout 
				invalidate-session="true" 
				logout-success-url="/login" 
				logout-url="/logout"/>
	
	</security:http>
	
	<!-- Declare an authentication-manager to use a custom userDetailsService -->
	<!--
	<security:authentication-manager alias="authenticationManager">
	        <security:authentication-provider user-service-ref="userDetailsService">
	        		<security:password-encoder ref="passwordEncoder"/>
	        </security:authentication-provider>
	</security:authentication-manager>
	-->
	<!-- Use a Md5 encoder since the user's passwords are stored as Md5 in the database -->
	<bean class="org.springframework.security.authentication.encoding.Md5PasswordEncoder" id="passwordEncoder"/>

	 <!-- An in-memory list of users. No need to access an external database layer.
		    See Spring Security 3.2 Reference 5.2.1 In-Memory Authentication -->
	 <!-- john's password is admin, while jane;s password is user  -->
	 <!--
	 <security:user-service id="userDetailsService">
	    <security:user name="john" password="21232f297a57a5a743894a0e4a801fc3" authorities="ROLE_USER, ROLE_ADMIN" />
	    <security:user name="jane" password="ee11cbb19052e40b07aac0ca060c23ee" authorities="ROLE_USER" />
	  </security:user-service>
	  -->
	  
	 <security:authentication-manager alias="authenticationManager">
	  <security:authentication-provider>
		<security:jdbc-user-service data-source-ref="dataSource"
		  users-by-username-query=
		    "select username,password, enabled from users where username=?"
		  authorities-by-username-query=
		    "select username, role from user_roles where username =?  " />
	  </security:authentication-provider>
	</security:authentication-manager>

	  
	  <bean id="concurrencyFilter"
      	class="org.springframework.security.web.session.ConcurrentSessionFilter">
      	<property name="sessionRegistry" ref="sessionRegistry" />
      	<property name="expiredUrl" value="/session-expired.htm" />
  	  </bean>

	  
  	  <bean id="myAuthFilter"
      	class="org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter">
      	<property name="sessionAuthenticationStrategy" ref="sas" />
      	<property name="authenticationManager" ref="authenticationManager" />
      </bean>
      
            
      <bean id="sas"
      	class="org.springframework.security.web.authentication.session.ConcurrentSessionControlStrategy">
      	<constructor-arg name="sessionRegistry" ref="sessionRegistry" />
      	<property name="maximumSessions" value="1" />
      </bean>

      <bean id="sessionRegistry" class="org.springframework.security.core.session.SessionRegistryImpl" />
	
</beans>
